{"version":3,"sources":["folderBlock/helper.js","reducersFolder/mainReducer.js","folderBlock/contextMenu.js","folderBlock/folderList.js","folderBlock/newFolderButton/Index.js","folderBlock/Index.js","App.js","reportWebVitals.js","reducersFolder/index.js","storeFolder/store.js","index.js"],"names":["arrPusher","arr","uniqid","require","push","id","name","localStorage","setItem","JSON","stringify","SET_FOLDER","SET_FOLDER_ID","SET_SWITCH_FOLDER_INPUT","SET_FOLDER_MENU_POSITION","initialState","foldersList","parse","getItem","folderId","folderContextMenu","mouseX","mouseY","folderStatusInput","setFolder","type","payload","setFolderId","setPosFolderMenu","setfolderStatusInput","connect","store","main","dispatch","setFolderAction","setFolderIdAction","setPosFolderMenuAction","setfolderStatusInputAction","props","newData","_","cloneDeep","handleClose","style","cursor","Menu","keepMounted","open","onClose","anchorReference","anchorPosition","top","left","undefined","MenuItem","onClick","newArr","filter","item","arrRemoveFolder","useStyles","makeStyles","theme","root","overflow","width","backgroundColor","palette","background","paper","rootInput","color","classes","handleDoubleClick","event","preventDefault","clientX","clientY","handleChange","value","map","arrRenameFolder","target","className","List","component","aria-label","ListItem","button","selected","index","onDoubleClick","ListItemText","primary","TextField","defaultValue","onBlur","InputProps","disableUnderline","disabled","autoFocus","textTransform","fontWeight","Button","startIcon","display","flexWrap","margin","spacing","height","flexDirection","justifyContent","LeftBlock","Paper","variant","square","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","state","action","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById"],"mappings":"oQAEaA,EAAY,SAACC,GACxB,IAAMC,EAASC,EAAQ,IAMvB,OALAF,EAAIG,KAAK,CACPC,GAAIH,IACJI,KAAM,eAERC,aAAaC,QAAQ,aAAcC,KAAKC,UAAUT,IAC1CA,G,gBCTJU,EAAa,aACbC,EAAgB,gBAChBC,EAA0B,0BAC1BC,EAA2B,2BAE3BC,EAAe,CACnBC,YAAaP,KAAKQ,MAAMV,aAAaW,QAAQ,gBAAkB,GAC/DC,SAAU,EACVC,kBAAmB,CACjBC,OAAQ,KACRC,OAAQ,MAEVC,mBAAmB,GAsBd,SAASC,EAAWR,GACzB,MAAO,CACLS,KAAM,aACNC,QAASV,GAIN,SAASW,EAAaR,GAC3B,MAAO,CACLM,KAAM,gBACNC,QAASP,GAIN,SAASS,EAAkBR,GAChC,MAAO,CACLK,KAAM,2BACNC,QAASN,GAIN,SAASS,EAAsBN,GACpC,MAAO,CACLE,KAAM,0BACNC,QAASH,GCjDb,IAAMR,EAAe,CACnBM,OAAQ,KACRC,OAAQ,MAoEKQ,mBAjES,SAAAC,GAAU,IAAD,EACyCA,EAAMC,KAC9E,MAAO,CACLhB,YAH6B,EACvBA,YAGNG,SAJ6B,EACVA,SAInBC,kBAL6B,EACAA,kBAK7BG,kBAN6B,EACmBA,sBASzB,SAACU,GAC1B,MAAO,CACLC,gBAAiB,SAAAlB,GAAW,OAAIiB,EAAST,EAAUR,KACnDmB,kBAAmB,SAAAhB,GAAQ,OAAIc,EAASN,EAAYR,KACpDiB,uBAAwB,SAAAhB,GAAiB,OAAIa,EAASL,EAAiBR,KACvEiB,2BAA4B,SAAAd,GAAiB,OAAIU,EAASJ,EAAqBN,QAkDpEO,EA9Cf,SAAsBQ,GAAQ,IACpBF,EAAqIE,EAArIF,uBAAwBhB,EAA6GkB,EAA7GlB,kBAAmBc,EAA0FI,EAA1FJ,gBAAiBlB,EAAyEsB,EAAzEtB,YAAaG,EAA4DmB,EAA5DnB,SAAUgB,EAAkDG,EAAlDH,kBAAmBE,EAA+BC,EAA/BD,2BACtGhB,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,OACViB,EAAUC,IAAEC,UAAUzB,GAEtB0B,EAAc,WAClBN,EAAuBrB,IAmBzB,OACE,qBAAK4B,MAAO,CAAEC,OAAQ,gBAAtB,SACE,eAACC,EAAA,EAAD,CACEC,aAAW,EACXC,KAAiB,OAAXzB,EACN0B,QAASN,EACTO,gBAAgB,iBAChBC,eACa,OAAX5B,GAA8B,OAAXD,EACf,CAAE8B,IAAK7B,EAAQ8B,KAAM/B,QACrBgC,EARR,UAWE,cAACC,EAAA,EAAD,CAAUC,QA7BQ,WACtBrB,EAAgBlC,EAAUuC,IAC1BG,KA2BI,wBACA,cAACY,EAAA,EAAD,CAAUC,QAzBW,WACzBb,IACAL,GAA2B,IAuBvB,2BACA,cAACiB,EAAA,EAAD,CAAUC,QArBW,WACzBrB,EFzC2B,SAACjC,EAAKkB,GACnC,IAAMqC,EAAShB,IAAEiB,OAAOxD,GAAK,SAAUyD,GAAQ,OAAOA,EAAKrD,KAAOc,KAElE,OADAZ,aAAaC,QAAQ,aAAcC,KAAKC,UAAU8C,IAC1CA,EEsCUG,CAAgBpB,EAASpB,IACzCgB,EAAkB,GAClBO,KAkBI,mCC5DFkB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,OACVC,MAAO,OACPC,gBAAiBJ,EAAMK,QAAQC,WAAWC,OAE5CC,UAAW,CACT,iBAAkB,CAChBJ,gBAAiB,WAEnB,kBAAmB,CACjBK,MAAO,QACPL,gBAAiB,aA+ERpC,mBA1ES,SAAAC,GAAU,IAAD,EACyCA,EAAMC,KAC9E,MAAO,CACLhB,YAH6B,EACvBA,YAGNG,SAJ6B,EACVA,SAInBC,kBAL6B,EACAA,kBAK7BG,kBAN6B,EACmBA,sBASzB,SAACU,GAC1B,MAAO,CACLC,gBAAiB,SAAAlB,GAAW,OAAIiB,EAAST,EAAUR,KACnDmB,kBAAmB,SAAAhB,GAAQ,OAAIc,EAASN,EAAYR,KACpDiB,uBAAwB,SAAAhB,GAAiB,OAAIa,EAASL,EAAiBR,KACvEiB,2BAA4B,SAAAd,GAAiB,OAAIU,EAASJ,EAAqBN,QA2DpEO,EAxDf,SAA2BQ,GACzB,IAAMkC,EAAUZ,IACR5C,EAAqIsB,EAArItB,YAAaG,EAAwHmB,EAAxHnB,SAAUgB,EAA8GG,EAA9GH,kBAAmBC,EAA2FE,EAA3FF,uBAAwBF,EAAmEI,EAAnEJ,gBAAiBX,EAAkDe,EAAlDf,kBAAmBc,EAA+BC,EAA/BD,2BACxGnC,EAASC,EAAQ,IAEjBsE,EAAoB,SAACC,GACzBA,EAAMC,iBACNvC,EAAuB,CACrBf,OAAQqD,EAAME,QAAU,EACxBtD,OAAQoD,EAAMG,QAAU,KAQtBC,EAAe,SAACJ,GACpB,IAAMnC,EAAUC,IAAEC,UAAUzB,GAC5BkB,EHjD2B,SAACjC,EAAKkB,EAAU4D,GAC7C,IAAMvB,EAASvD,EAAI+E,KAAI,SAAUtB,GAC/B,OAAIA,EAAKrD,KAAOc,EAEZ,CACEd,GAAIqD,EAAKrD,GACTC,KAAMyE,GAIFrB,KAIZ,OADAnD,aAAaC,QAAQ,aAAcC,KAAKC,UAAU8C,IAC1CA,EGmCUyB,CAAgB1C,EAASpB,EAAUuD,EAAMQ,OAAOH,QAChE1C,GAA2B,IAG7B,OACE,qBAAK8C,UAAWX,EAAQT,KAAxB,SACE,eAACqB,EAAA,EAAD,CAAMC,UAAU,MAAMC,aAAW,uBAAjC,UACGtE,EAAYgE,KAAI,SAACtB,GAAD,OACf,cAAC6B,EAAA,EAAD,CAEEC,QAAM,EACNC,SAAUtE,IAAauC,EAAKrD,GAC5BkD,QAAS,SAACmB,GAAD,OAlBiBgB,EAkBqBhC,EAAKrD,QAjB5D8B,EAAkBuD,GADQ,IAAQA,GAmB1BC,cAAelB,EALjB,SAOE,cAACmB,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEX,UAAWX,EAAQF,UACnByB,aAAcrC,EAAKpD,KACnB0F,OAAQlB,EACRmB,WAAY,CACVC,kBAAkB,EAClBC,SAAU5E,EACV6E,UAAW1C,EAAKrD,KAAOc,KAAa,QAfvCjB,QAsBT,cAAC,EAAD,Y,0BCxFF0D,EAAYC,aAAW,iBAAO,CAElCE,KAAM,CACJsC,cAAe,OACfC,WAAY,OACZrC,MAAO,YAuCInC,mBAnCS,SAAAC,GAEtB,MAAO,CACLf,YAFsBe,EAAMC,KAAtBhB,gBAMiB,SAACiB,GAC1B,MAAO,CACLC,gBAAiB,SAAAlB,GAAW,OAAIiB,EAAST,EAAUR,QA0BxCc,EAtBf,SAA2BQ,GACzB,IAAMkC,EAAUZ,IACR5C,EAAiCsB,EAAjCtB,YAAakB,EAAoBI,EAApBJ,gBACfK,EAAUC,IAAEC,UAAUzB,GAM5B,OACE,8BACE,cAACuF,EAAA,EAAD,CACEpB,UAAWX,EAAQT,KACnByC,UAAW,cAAC,IAAD,IACXjD,QAToB,WACxBrB,EAAgBlC,EAAUuC,KAKxB,6BCrCAqB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ0C,QAAS,OACTC,SAAU,OACV,QAAS,CACPC,OAAQ7C,EAAM8C,QAAQ,GACtB3C,MAAOH,EAAM8C,QAAQ,IACrBC,OAAQ/C,EAAM8C,QAAQ,IACtBH,QAAS,OACTK,cAAe,SACfC,eAAgB,sBAKP,SAASC,IACtB,IAAMxC,EAAUZ,IAEhB,OACE,qBAAKuB,UAAWX,EAAQT,KAAxB,SACE,eAACkD,EAAA,EAAD,CAAOC,QAAQ,WAAWC,QAAM,EAAhC,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SCjBOC,MARf,WACE,OACE,qBAAKjC,UAAU,MAAf,SACE,cAAC6B,EAAD,OCOSK,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACvC,aAAcC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACrDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,QCLDQ,EAAcC,0BAAgB,CACzC/F,KPWK,WAAqD,IAA/BgG,EAA8B,uDAAtBjH,EAAckH,EAAQ,uCACzD,OAAQA,EAAOxG,MACb,KAAKd,EACH,OAAO,2BAAKqH,GAAZ,IAAmBhH,YAAaiH,EAAOvG,UAEzC,KAAKd,EACH,OAAO,2BAAKoH,GAAZ,IAAmB7G,SAAU8G,EAAOvG,UAEtC,KAAKZ,EACH,OAAO,2BAAKkH,GAAZ,IAAmB5G,kBAAmB6G,EAAOvG,UAE/C,KAAKb,EACH,OAAO,2BAAKmH,GAAZ,IAAmBzG,kBAAmB0G,EAAOvG,UAE/C,QACE,OAAOsG,M,QQ1BAjG,EAAQmG,sBAAYJ,EAAaK,8BCI9CC,IAASC,OACP,cAAC,IAAD,CAAUtG,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFuG,SAASC,eAAe,SAG1BlB,M","file":"static/js/main.f55415e3.chunk.js","sourcesContent":["import _ from 'lodash'\r\n// func for add new folders\r\nexport const arrPusher = (arr) => {\r\n  const uniqid = require('uniqid')\r\n  arr.push({\r\n    id: uniqid(),\r\n    name: 'New Folder'\r\n  })\r\n  localStorage.setItem('arrFolders', JSON.stringify(arr))\r\n  return (arr)\r\n}\r\n// func for remove folder\r\nexport const arrRemoveFolder = (arr, folderId) => {\r\n  const newArr = _.filter(arr, function (item) { return item.id !== folderId })\r\n  localStorage.setItem('arrFolders', JSON.stringify(newArr))\r\n  return (newArr)\r\n}\r\n// func for change folder name\r\nexport const arrRenameFolder = (arr, folderId, value) => {\r\n  const newArr = arr.map(function (item) {\r\n    if (item.id === folderId) {\r\n      return (\r\n        {\r\n          id: item.id,\r\n          name: value\r\n        }\r\n      )\r\n    } else {\r\n      return (item)\r\n    }\r\n  })\r\n  localStorage.setItem('arrFolders', JSON.stringify(newArr))\r\n  return (newArr)\r\n}\r\n","const SET_FOLDER = 'SET_FOLDER'\r\nconst SET_FOLDER_ID = 'SET_FOLDER_ID'\r\nconst SET_SWITCH_FOLDER_INPUT = 'SET_SWITCH_FOLDER_INPUT'\r\nconst SET_FOLDER_MENU_POSITION = 'SET_FOLDER_MENU_POSITION'\r\n\r\nconst initialState = {\r\n  foldersList: JSON.parse(localStorage.getItem('arrFolders')) || [],\r\n  folderId: 0,\r\n  folderContextMenu: {\r\n    mouseX: null,\r\n    mouseY: null\r\n  },\r\n  folderStatusInput: true\r\n}\r\n\r\nexport function mainReducer (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_FOLDER:\r\n      return { ...state, foldersList: action.payload }\r\n\r\n    case SET_FOLDER_ID:\r\n      return { ...state, folderId: action.payload }\r\n\r\n    case SET_FOLDER_MENU_POSITION:\r\n      return { ...state, folderContextMenu: action.payload }\r\n\r\n    case SET_SWITCH_FOLDER_INPUT:\r\n      return { ...state, folderStatusInput: action.payload }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function setFolder (foldersList) {\r\n  return {\r\n    type: 'SET_FOLDER',\r\n    payload: foldersList\r\n  }\r\n}\r\n\r\nexport function setFolderId (folderId) {\r\n  return {\r\n    type: 'SET_FOLDER_ID',\r\n    payload: folderId\r\n  }\r\n}\r\n\r\nexport function setPosFolderMenu (folderContextMenu) {\r\n  return {\r\n    type: 'SET_FOLDER_MENU_POSITION',\r\n    payload: folderContextMenu\r\n  }\r\n}\r\n\r\nexport function setfolderStatusInput (folderStatusInput) {\r\n  return {\r\n    type: 'SET_SWITCH_FOLDER_INPUT',\r\n    payload: folderStatusInput\r\n  }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Menu from '@material-ui/core/Menu'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport _ from 'lodash'\r\nimport { arrPusher, arrRemoveFolder } from './helper'\r\nimport { connect } from 'react-redux'\r\nimport { setFolder, setFolderId, setPosFolderMenu, setfolderStatusInput } from '../reducersFolder/mainReducer'\r\n\r\nconst initialState = {\r\n  mouseX: null,\r\n  mouseY: null\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  const { foldersList, folderId, folderContextMenu, folderStatusInput } = store.main\r\n  return {\r\n    foldersList,\r\n    folderId,\r\n    folderContextMenu,\r\n    folderStatusInput\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setFolderAction: foldersList => dispatch(setFolder(foldersList)),\r\n    setFolderIdAction: folderId => dispatch(setFolderId(folderId)),\r\n    setPosFolderMenuAction: folderContextMenu => dispatch(setPosFolderMenu(folderContextMenu)),\r\n    setfolderStatusInputAction: folderStatusInput => dispatch(setfolderStatusInput(folderStatusInput))\r\n  }\r\n}\r\n\r\nfunction ContextMenu (props) {\r\n  const { setPosFolderMenuAction, folderContextMenu, setFolderAction, foldersList, folderId, setFolderIdAction, setfolderStatusInputAction } = props\r\n  const { mouseX, mouseY } = folderContextMenu\r\n  const newData = _.cloneDeep(foldersList)\r\n\r\n  const handleClose = () => {\r\n    setPosFolderMenuAction(initialState)\r\n  }\r\n\r\n  const addFolderButton = () => {\r\n    setFolderAction(arrPusher(newData))\r\n    handleClose()\r\n  }\r\n\r\n  const renameFolderButton = () => {\r\n    handleClose()\r\n    setfolderStatusInputAction(false)\r\n  }\r\n\r\n  const removeFolderButton = () => {\r\n    setFolderAction(arrRemoveFolder(newData, folderId))\r\n    setFolderIdAction(0)\r\n    handleClose()\r\n  }\r\n\r\n  return (\r\n    <div style={{ cursor: 'context-menu' }}>\r\n      <Menu\r\n        keepMounted\r\n        open={mouseY !== null}\r\n        onClose={handleClose}\r\n        anchorReference=\"anchorPosition\"\r\n        anchorPosition={\r\n          mouseY !== null && mouseX !== null\r\n            ? { top: mouseY, left: mouseX }\r\n            : undefined\r\n        }\r\n      >\r\n        <MenuItem onClick={addFolderButton}>Add folder</MenuItem>\r\n        <MenuItem onClick={renameFolderButton}>Rename folder</MenuItem>\r\n        <MenuItem onClick={removeFolderButton}>Delete folder</MenuItem>\r\n      </Menu>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ContextMenu)\r\n\r\nContextMenu.propTypes = {\r\n  setfolderStatusInputAction: PropTypes.func.isRequired,\r\n  setFolderAction: PropTypes.func.isRequired,\r\n  foldersList: PropTypes.array.isRequired,\r\n  setPosFolderMenuAction: PropTypes.func.isRequired,\r\n  folderContextMenu: PropTypes.object.isRequired,\r\n  setFolderIdAction: PropTypes.func.isRequired,\r\n  folderId: PropTypes.oneOfType([\r\n    PropTypes.string.isRequired,\r\n    PropTypes.number.isRequired\r\n  ])\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport ContextMenu from './contextMenu'\r\nimport _ from 'lodash'\r\nimport { arrRenameFolder } from './helper'\r\nimport { connect } from 'react-redux'\r\nimport { setFolder, setFolderId, setPosFolderMenu, setfolderStatusInput } from '../reducersFolder/mainReducer'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    overflow: 'auto',\r\n    width: '100%',\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  rootInput: {\r\n    '& .Mui-focused': {\r\n      backgroundColor: '#75c1ff'\r\n    },\r\n    '& .Mui-disabled': {\r\n      color: 'black',\r\n      backgroundColor: 'none'\r\n    }\r\n  }\r\n}))\r\n\r\nconst mapStateToProps = store => {\r\n  const { foldersList, folderId, folderContextMenu, folderStatusInput } = store.main\r\n  return {\r\n    foldersList,\r\n    folderId,\r\n    folderContextMenu,\r\n    folderStatusInput\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setFolderAction: foldersList => dispatch(setFolder(foldersList)),\r\n    setFolderIdAction: folderId => dispatch(setFolderId(folderId)),\r\n    setPosFolderMenuAction: folderContextMenu => dispatch(setPosFolderMenu(folderContextMenu)),\r\n    setfolderStatusInputAction: folderStatusInput => dispatch(setfolderStatusInput(folderStatusInput))\r\n  }\r\n}\r\nfunction SelectedListItem (props) {\r\n  const classes = useStyles()\r\n  const { foldersList, folderId, setFolderIdAction, setPosFolderMenuAction, setFolderAction, folderStatusInput, setfolderStatusInputAction } = props\r\n  const uniqid = require('uniqid')\r\n\r\n  const handleDoubleClick = (event) => {\r\n    event.preventDefault()\r\n    setPosFolderMenuAction({\r\n      mouseX: event.clientX - 2,\r\n      mouseY: event.clientY - 4\r\n    })\r\n  }\r\n\r\n  const handleListItemClick = (event, index) => {\r\n    setFolderIdAction(index)\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    const newData = _.cloneDeep(foldersList)\r\n    setFolderAction(arrRenameFolder(newData, folderId, event.target.value))\r\n    setfolderStatusInputAction(true)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n        {foldersList.map((item) => (\r\n          <ListItem\r\n            key={uniqid()}\r\n            button\r\n            selected={folderId === item.id}\r\n            onClick={(event) => handleListItemClick(event, item.id)}\r\n            onDoubleClick={handleDoubleClick}\r\n          >\r\n            <ListItemText\r\n              primary={\r\n                <TextField\r\n                  className={classes.rootInput}\r\n                  defaultValue={item.name}\r\n                  onBlur={handleChange}\r\n                  InputProps={{\r\n                    disableUnderline: true,\r\n                    disabled: folderStatusInput,\r\n                    autoFocus: item.id === folderId !== false\r\n                  }}\r\n                />\r\n              }\r\n            />\r\n          </ListItem>\r\n        ))}\r\n        <ContextMenu/>\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectedListItem)\r\n\r\nSelectedListItem.propTypes = {\r\n  folderStatusInput: PropTypes.bool.isRequired,\r\n  setfolderStatusInputAction: PropTypes.func.isRequired,\r\n  setFolderAction: PropTypes.func.isRequired,\r\n  foldersList: PropTypes.array.isRequired,\r\n  setPosFolderMenuAction: PropTypes.func.isRequired,\r\n  setFolderIdAction: PropTypes.func.isRequired,\r\n  folderId: PropTypes.oneOfType([\r\n    PropTypes.string.isRequired,\r\n    PropTypes.number.isRequired\r\n  ])\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline'\r\nimport { connect } from 'react-redux'\r\nimport { setFolder } from '../../reducersFolder/mainReducer'\r\nimport { arrPusher } from '../helper'\r\nimport _ from 'lodash'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n\r\n  root: {\r\n    textTransform: 'none',\r\n    fontWeight: 'bold',\r\n    width: '100%'\r\n  }\r\n}))\r\n\r\nconst mapStateToProps = store => {\r\n  const { foldersList } = store.main\r\n  return {\r\n    foldersList\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setFolderAction: foldersList => dispatch(setFolder(foldersList))\r\n  }\r\n}\r\n\r\nfunction IconLabelButtons (props) {\r\n  const classes = useStyles()\r\n  const { foldersList, setFolderAction } = props\r\n  const newData = _.cloneDeep(foldersList)\r\n\r\n  const handleButtonClick = () => {\r\n    setFolderAction(arrPusher(newData))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        className={classes.root}\r\n        startIcon={<AddCircleOutlineIcon />}\r\n        onClick={handleButtonClick}\r\n      >\r\n        New Folder\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(IconLabelButtons)\r\n\r\nIconLabelButtons.propTypes = {\r\n  foldersList: PropTypes.array.isRequired,\r\n  setFolderAction: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport SelectedListItem from './folderList'\r\nimport IconLabelButtons from './newFolderButton/Index'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: theme.spacing(25),\r\n      height: theme.spacing(95),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'space-between'\r\n    }\r\n  }\r\n}))\r\n\r\nexport default function LeftBlock () {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper variant=\"outlined\" square>\r\n        <SelectedListItem/>\r\n        <IconLabelButtons/>\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport LeftBlock from './folderBlock/Index'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <LeftBlock/>\n    </div>\n  )\n}\n\nexport default App\n","import 'web-vitals'\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    ('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { combineReducers } from 'redux'\r\nimport { mainReducer } from './mainReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n  main: mainReducer\r\n})\r\n","import { createStore } from 'redux'\r\nimport { rootReducer } from '../reducersFolder/index'\r\nimport { devToolsEnhancer } from 'redux-devtools-extension'\r\n\r\nexport const store = createStore(rootReducer, devToolsEnhancer())\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { store } from './storeFolder/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}